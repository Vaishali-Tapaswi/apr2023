Lab7 - aws sdk Client Code for lambda
       https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/lambda-go-example-run-function.html
Lab6 - Http Client Code
       package main

       import (
              "bytes"
              "fmt"
              "io/ioutil"
              "net/http"
       )

       func main() {
              httpposturl := "https://piwdrxjvx5.execute-api.us-east-1.amazonaws.com/Final/test11"
              fmt.Println("HTTP JSON POST URL:", httpposturl)

              var jsonData = []byte(`{
                     "username": "fandsinfonetpvtltd"		
              }`)
              request, error := http.NewRequest("POST", httpposturl, bytes.NewBuffer(jsonData))
              request.Header.Set("Content-Type", "application/json; charset=UTF-8")

              client := &http.Client{}
              response, error := client.Do(request)
              if error != nil {
                     panic(error)
              }
              defer response.Body.Close()

              fmt.Println("response Status:", response.Status)
              fmt.Println("response Headers:", response.Header)
              body, _ := ioutil.ReadAll(response.Body)
              fmt.Println("response Body:", string(body))

       }
Lab5 - Customize API Gateway
       create  API gateway for current lambda
              create new API gateway - REST API -new resource  
              Create new method -> post 
                         Integration type   Lambda Function 
                         Lambda region - 
                         Lambda Function - ....
               Edit Method Request
                     Request Body ->Add Model 
                                   Application/json -> Empty
               Modify Integration Request 
                     Mapping Template 
                            add
                                   application/json
                                          {
                                              "name":"FixedName"
                                          }
                Save -Test 
                if successful -> Deploy API 
                                   give any stage name
                        copy url -> test from postman -> Forbiddon
                        copy url for post method -> finish testing       

          Modify 
          create name model
                 models -> create -> namemodel
                        {
                          "$schema" : "http://json-schema.org/draft-04/schema#",
                          "title" : "name",
                          "type" : "object",
                          "properties" : {
                            "username" : { "type" : "string" }
                          }
                        }
                Modify Method Request -> request body->
                        content type -App/json -> namemodel
                 Modify integration request ->
                               Mapping Template -> add for app/json
                                      #set($inputRoot = $input.path('$'))
                                      {
                                        "name" : "$input.path('username')"
                                      }
                  Test -> from Console
                          from Postman

Lab4 - day4\demo2
          cmd>go.exe install github.com/aws/aws-lambda-go/cmd/build-lambda-zip@latest
                   in Demo1\main.go
                        package main

                        import (
                                "fmt"
                                "context"
                                "github.com/aws/aws-lambda-go/lambda"
                        )

                        type MyEvent struct {
                                Name string `json:"name"`
                        }

                        func HandleRequest(ctx context.Context, event MyEvent) (string, error) {
                                return fmt.Sprintf("Hello %s!", event.Name ), nil
                        }

                        func main() {
                                lambda.Start(HandleRequest)
                        }
cmd\Demo>
            go mod init hello
            go mod tidy
            set GOOS=linux
            set GOARCH=amd64
            set CGO_ENABLED=0
            go build -o hello hello.go
            %USERPROFILE%\Go\bin\build-lambda-zip.exe -o hello.zip hello

            AWS Console -> create a lambda function - for go -> upload hello -> function name (hello),
            test function locally
       
Lab 3 - AWS Console -> Lambda -> Create new default function in Node (default arch)
            From scratch-> test ->
         Add Trigger -> API Gateway -> security -> open
              Invoke it from browser (Lambda -> configuration -> API Gateway -> API Endpoint -> invoke from postman or different browser
            AWS Console Login -> https://901404827853.signin.aws.amazon.com/console 
                                Test1234!
Lab2 - write Lab2.go to create s3 bucket

Lab1 -VqJ 
  In case of AWS CLI on laptop
    1. delete c:\users\[admin]\.aws folder
    2. aws configure 
          AWS Access Key ID [****************U7SO]: ___A5DX7KEDGVL3AU7SO
          AWS Secret Access Key [****************WJ5Z]: ___lgwL2ea5xxuZoUwXF1+t5BRVL93iyq1H7WJ5Z
          Default region name [us-east1]: us-east-1
          Default output format [None]:
    3. aws s3 ls
 in case no cli on laptop
  1. create file config  on c:\users\[admin]\.aws folder
    [default]
    region = us-east-1
  2. create file config  on c:\users\[admin]\.aws folder
    [default]
    aws_access_key_id = ___A5DX7KEDGVL3AU7SO
    aws_secret_access_key = ___lgwL2ea5xxuZoUwXF1+t5BRVL93iyq1H7WJ5Z

  in Day4\demo1
  Create Lab1.go 
        package main

      import (
        "context"
        "fmt"

        "github.com/aws/aws-sdk-go-v2/config"
        "github.com/aws/aws-sdk-go-v2/service/s3"
      )

      // main uses the AWS SDK for Go V2 to create an Amazon Simple Storage Service
      // (Amazon S3) client and list up to 10 buckets in your account.
      // This example uses the default settings specified in your shared credentials
      // and config files.
      func main() {
        sdkConfig, err := config.LoadDefaultConfig(context.TODO())
        if err != nil {
          fmt.Println("Couldn't load default configuration. Have you set up your AWS account?")
          fmt.Println(err)
          return
        }
        s3Client := s3.NewFromConfig(sdkConfig)
        count := 10
        fmt.Printf("Let's list up to %v buckets for your account.\n", count)
        result, err := s3Client.ListBuckets(context.TODO(), &s3.ListBucketsInput{})
        if err != nil {
          fmt.Printf("Couldn't list buckets for your account. Here's why: %v\n", err)
          return
        }
        if len(result.Buckets) == 0 {
          fmt.Println("You don't have any buckets!")
        } else {
          if count > len(result.Buckets) {
            count = len(result.Buckets)
          }
          for _, bucket := range result.Buckets[:count] {
            fmt.Printf("\t%v\n", *bucket.Name)
          }
        }
      }
   create module, download libs 
   and run 
   
