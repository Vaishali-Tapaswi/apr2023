Lab2 - write Lab2.go to create s3 bucket

Lab1 -VqJ 
  In case of AWS CLI on laptop
    1. delete c:\users\[admin]\.aws folder
    2. aws configure 
          AWS Access Key ID [****************U7SO]: ___A5DX7KEDGVL3AU7SO
          AWS Secret Access Key [****************WJ5Z]: ___lgwL2ea5xxuZoUwXF1+t5BRVL93iyq1H7WJ5Z
          Default region name [us-east1]: us-east-1
          Default output format [None]:
    3. aws s3 ls
 in case no cli on laptop
  1. create file config  on c:\users\[admin]\.aws folder
    [default]
    region = us-east-1
  2. create file config  on c:\users\[admin]\.aws folder
    [default]
    aws_access_key_id = ___A5DX7KEDGVL3AU7SO
    aws_secret_access_key = ___lgwL2ea5xxuZoUwXF1+t5BRVL93iyq1H7WJ5Z

  in Day4\demo1
  Create Lab1.go 
        package main

      import (
        "context"
        "fmt"

        "github.com/aws/aws-sdk-go-v2/config"
        "github.com/aws/aws-sdk-go-v2/service/s3"
      )

      // main uses the AWS SDK for Go V2 to create an Amazon Simple Storage Service
      // (Amazon S3) client and list up to 10 buckets in your account.
      // This example uses the default settings specified in your shared credentials
      // and config files.
      func main() {
        sdkConfig, err := config.LoadDefaultConfig(context.TODO())
        if err != nil {
          fmt.Println("Couldn't load default configuration. Have you set up your AWS account?")
          fmt.Println(err)
          return
        }
        s3Client := s3.NewFromConfig(sdkConfig)
        count := 10
        fmt.Printf("Let's list up to %v buckets for your account.\n", count)
        result, err := s3Client.ListBuckets(context.TODO(), &s3.ListBucketsInput{})
        if err != nil {
          fmt.Printf("Couldn't list buckets for your account. Here's why: %v\n", err)
          return
        }
        if len(result.Buckets) == 0 {
          fmt.Println("You don't have any buckets!")
        } else {
          if count > len(result.Buckets) {
            count = len(result.Buckets)
          }
          for _, bucket := range result.Buckets[:count] {
            fmt.Printf("\t%v\n", *bucket.Name)
          }
        }
      }
   create module, download libs 
   and run 
   
