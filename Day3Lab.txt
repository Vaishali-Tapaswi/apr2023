		if r.Method == "GET" {
			barr, _ := json.Marshal(empmgr.list())
			fmt.Fprintln(w, string(barr))
		}
		if r.Method == "POST" {
			fmt.Fprintln(w, "POST Request invoked ")
			fmt.Println(w)
			emp := Emp{}
			decoder := json.NewDecoder(r.Body)
			decoder.Decode(&emp)
			fmt.Println(emp)
			empmgr.add(emp)
		}
    -----------
 
 EmpMgr.go
                package main 
                import (
                        "fmt"
                )
                type Emp struct {
                        Empno   int    `json:"empno"`
                        Ename string `json:"empname"`
                        Salary  int    `json:"salary"`
                }
                type EmpMgr struct{
                        emparr []Emp
                }
                func (empmgr *EmpMgr) add( emp Emp){
                        fmt.Println("EmpMgrAdd ", emp)
                        empmgr.emparr = append(empmgr.emparr, emp)
                }

                func (empmgr EmpMgr) list() []Emp{
                        fmt.Println("EmpMgrAdd ", len(empmgr.emparr))
                        return empmgr.emparr
                }
                /*
                func main(){
                        emp := Emp{1, "AA", 111}	
                        empmgr := EmpMgr{}
                        empmgr.add(emp)
                        empmgr.add(Emp{2, "BB", 222})
                        for i, v:= range empmgr.list(){
                                fmt.Println(i, "  -  ", v)
                        }
                }
                */
        Lab1.go 
                package main

                import (
                        "io"
                        "log"
                        "net/http"
                        "fmt"
                )
                var empmgr = EmpMgr{}
                func main() {
                        // Modify empHandler to use switch - get/post -> 
                             // modify get to convert emp slice to json and write it on w
                        empHandler := func(w http.ResponseWriter, req *http.Request) {
                                empslice := empmgr.list()
                                // marshal

                                io.WriteString(w, "<h1>Hello, world!</h1>")
                                fmt.Println(req.Method)
                        }
                        http.HandleFunc("/", func(w http.ResponseWriter, req *http.Request) {
                                io.WriteString(w, "<h1><a href='emps'>List Employees</a></h1>")
                        })
                        http.HandleFunc("/emps", empHandler)

                        fmt.Println("Starting Server on 8080")
                        log.Fatal(http.ListenAndServe(":8080", nil))
                }

---------------------------------

Lab4 -
        Part3 - Modify Lab1.go to return Slice of Emps as JSON for get request
        
        Part 2- create exe/linux runnable
                go build Lab1.go (create windows exe)
                set GOOS=linux
                go build Lab1.go (create linux executable)
       
        Part 1- 
                demo2\Lab1.go
                package main

                import (
                        "io"
                        "log"
                        "net/http"
                        "fmt"
                )

                func main() {

                        helloHandler := func(w http.ResponseWriter, req *http.Request) {
                                io.WriteString(w, "<h1>Hello, world!</h1>")
                                fmt.Println(req.Method)
                        }
                        http.HandleFunc("/", func(w http.ResponseWriter, req *http.Request) {
                                io.WriteString(w, "<h1>Landing Page</h1>")
                        })
                        http.HandleFunc("/hello", helloHandler)

                        fmt.Println("Starting Server on 8080")
                        log.Fatal(http.ListenAndServe(":8080", nil))
                }
                Run - using browser + postman and invoke get/post
      

Lab3 - For unmarshal 
        download content from  https://reqres.in/api/users/2
        Show me email address of user 2 (convert json to struct, unmarshal and just show data.email
        
        package main
        import (
         "net/http"
          "fmt"
         "io"
         "encoding/json"
        )
        type User struct {
         Data struct {
          ID        int    `json:"id"`
          Email     string `json:"email"`
          FirstName string `json:"first_name"`
          LastName  string `json:"last_name"`
          Avatar    string `json:"avatar"`
         } `json:"data"`
         Support struct {
          URL  string `json:"url"`
          Text string `json:"text"`
         } `json:"support"`
        }

        func main(){
         resp, _ := http.Get("https://reqres.in/api/users/2")
         defer resp.Body.Close()
         body, _ := io.ReadAll(resp.Body)
         fmt.Println(string(body))
         usr := User{}
         json.Unmarshal(body, &usr)
         fmt.Println("EMail : " , usr.Data.Email)	
        }
 Lab2 - package main

        import (
            "encoding/json"
            "fmt"
        )
        type Emp struct {
            Empno   int    `json:"empno"`
            Ename string `json:"empname"`
            Salary  int    `json:"salary"`
        }

        func main() {
            emp  :=Emp{1,"Vaishali",111}
            b, err := json.Marshal(emp)
            if err != nil {
                fmt.Println("error:", err)
            }
            fmt.Println(string(b))
            fmt.Println(emp)	
        }


Lab1 -
    BenchMarking
        add a method in Lab1_test.go
         func BenchmarkAdd(b *testing.B) {
            for i := 0; i < b.N; i++ {
               add(10,i)
            }
        }
       cmd>go test Lab1_test.go Lab1.go -v  --bench=.
       cmd>go test Lab1_test.go Lab1.go -v  --bench=.
       go test Lab1_test.go Lab1.go -v  --bench=. -test.count=300
    Testing 
        Lab1.go 
          package main
          import (
            "fmt"
          )
          func add(x, y int ) int {
            return x+y
          }
          func divide(x, y int ) int {
            return x/y
          }
          func main(){
            fmt.Println("add with 10 and 20", add(10,20))
            fmt.Println("divide with 100 and 20", divide(100,20))
          }

      Lab1_test.go -> modify     TestDivide2 to add recover -> if divide raises the panic, then it passes the test case 
        package main

        import "testing"

        func TestAdd(t *testing.T) {
            got := add(10,30)
            if got != 40 {
                t.Errorf("add(10,30) = %d; want 40", got)
            }
        }

        func TestDivide1(t *testing.T) {
            got := divide(100,50)
            if got != 2 {
                t.Errorf("add(10,30) = %d; want 2", got)
            }
        }
        // divide with 0 should panic, so recover and check if error is not nil -> pass
        /*
        func TestDivide2(t *testing.T) {
            got := divide(100,0)
            if got != 2 {
                t.Errorf("add(10,30) = %d; want 2", got)
            }
        }
        */
     cmd>go test lab1_test.go lab1.go 
     cmd>go test lab1_test.go lab1.go -v
     cmd>go test lab1_test.go lab1.go -v --cover
     cmd>go test Lab1_test.go Lab1.go -v -coverprofile tmp.txt
     cmd>go tool cover -html=tmp.txt -o tmp.html


